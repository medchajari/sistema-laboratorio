
package vistas;

import Entidades.ObraSocial;
import Entidades.Paciente;
import Entidades.Protocolo;
import Metodos.Conexion;
import Metodos.CuentaCorrienteData;
import Metodos.cajaData;
import Metodos.obrasocialData;
import Metodos.pacienteData;
import Metodos.protocoloData;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.eclipse.swt.internal.win32.OS;
import java.sql.SQLException;

/**
 *
 * @author MeD
 */
public class entregarProtocolo extends javax.swing.JFrame {

 private Conexion con;
 private protocoloData protocoloData;
 private pacienteData pacienteData;
 private obrasocialData obData;
 private cajaData cajaData;
 private CuentaCorrienteData ccData;
    public entregarProtocolo() {
        initComponents();
        con = new Conexion();
         ccData = new CuentaCorrienteData();
          protocoloData = new protocoloData(); 
          pacienteData = new pacienteData();
          obData = new obrasocialData();
          llenarComboBoxRazonSocial();
          agregarActionListenerComboBox();
          agregarActionListenerComboBoxProtocolos();
          llenarComboBoxObraSocial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtCuadroBusqueda = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        chkNProtocolo = new javax.swing.JCheckBox();
        chkDni = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDatos = new javax.swing.JTable();
        cbxRazonSocial = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        chkEfectivo = new javax.swing.JCheckBox();
        chkTransferencia = new javax.swing.JCheckBox();
        chkCC = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        cbxObraSocial = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAbonar = new javax.swing.JButton();
        cbxProtocolos = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        txtDescuentoObraSocial = new javax.swing.JTextField();
        txtTotalFinal = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCuadroBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCuadroBusquedaActionPerformed(evt);
            }
        });
        jPanel1.add(txtCuadroBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 125, 310, 50));

        btnBuscar.setForeground(new java.awt.Color(0, 102, 204));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos-chicos/lupa (1).png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.setToolTipText("");
        btnBuscar.setIconTextGap(10);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 125, 160, 50));

        chkNProtocolo.setText("Nº Protocolo");
        jPanel1.add(chkNProtocolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, -1, -1));

        chkDni.setText("Dni");
        jPanel1.add(chkDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, -1, -1));

        tableDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableDatos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 980, 120));

        jPanel1.add(cbxRazonSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 230, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setText("Razon Social");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 70, -1));

        chkEfectivo.setText("Efectivo");
        jPanel1.add(chkEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, -1, -1));

        chkTransferencia.setText("Transferencia");
        jPanel1.add(chkTransferencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 370, -1, -1));

        chkCC.setText("Cuenta Corriente");
        jPanel1.add(chkCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 370, -1, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 330, 10));

        jPanel1.add(cbxObraSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 480, 330, 30));

        jLabel2.setText("SubTotal :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 330, -1, -1));

        jLabel3.setText("Descuento Obra Social : ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 360, -1, -1));

        jLabel4.setText("Total :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 390, -1, -1));

        btnAbonar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAbonar.setForeground(new java.awt.Color(0, 102, 204));
        btnAbonar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos-chicos/inversor.png"))); // NOI18N
        btnAbonar.setText("ABONAR");
        btnAbonar.setIconTextGap(10);
        btnAbonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbonarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAbonar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 440, 310, 60));

        jPanel1.add(cbxProtocolos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 230, 40));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 204));
        jLabel5.setText("Nº Protocolo");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 204));
        jLabel6.setText("Forma de Pago");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 330, -1, -1));

        txtSubTotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSubTotal.setBorder(null);
        jPanel1.add(txtSubTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 330, 150, -1));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 310, 10, 210));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 255));
        jLabel8.setText("ENTREGAR RESULTADOS ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, -1, -1));

        txtDescuentoObraSocial.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtDescuentoObraSocial.setForeground(new java.awt.Color(102, 102, 102));
        txtDescuentoObraSocial.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDescuentoObraSocial.setBorder(null);
        jPanel1.add(txtDescuentoObraSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 360, 150, -1));

        txtTotalFinal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtTotalFinal.setForeground(new java.awt.Color(0, 102, 102));
        txtTotalFinal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalFinal.setBorder(null);
        jPanel1.add(txtTotalFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, 150, 30));

        txtUsuario.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtUsuario.setText("Melina");
        jPanel1.add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 70, 70, -1));

        jLabel10.setText("Usuario : ");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 70, 60, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondos/marquesina-1_B.jpg"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 120));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 204));
        jLabel9.setText("Detalle de Obra Social");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 450, -1, -1));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos-azules/30/adelante.png"))); // NOI18N
        btnSalir.setText("   SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 230, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
      // Obtener el texto del campo de búsqueda
    String busqueda = txtCuadroBusqueda.getText().trim();
    
    // Determinar el tipo de búsqueda
    boolean buscarPorDni = chkDni.isSelected();
    boolean buscarPorProtocolo = chkNProtocolo.isSelected();
    
    List<Protocolo> resultados = new ArrayList<>();
    
    if (buscarPorDni && !buscarPorProtocolo) {
        // Búsqueda solo por DNI
        resultados = protocoloData.buscarProtocolos(null, busqueda);
    } else if (!buscarPorDni && buscarPorProtocolo) {
        // Búsqueda solo por número de protocolo
        resultados = protocoloData.buscarProtocolos(busqueda, null);
    } else if (buscarPorDni && buscarPorProtocolo) {
        // Búsqueda por número de protocolo y DNI
        resultados = protocoloData.buscarProtocolos(busqueda, busqueda);
    } else {
        // Mostrar mensaje de error si no se selecciona ninguna opción
        JOptionPane.showMessageDialog(null, "Seleccione una opción de búsqueda.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Definir las columnas de la tabla
    String[] columnas = {"ID",  "Id Paciente","Número de Protocolo","Médico", "Tipo", "Fecha de Entrada", "Fecha de Salida","Estado", "Monto"};

    // Crear el modelo de tabla con las columnas
    DefaultTableModel model = new DefaultTableModel(columnas, 0);

    // Llenar el modelo con los resultados de la búsqueda
    for (Protocolo protocolo : resultados) {
        Object[] fila = new Object[]{
            protocolo.getIdProtocolo(),
            protocolo.getIdPaciente(),
            protocolo.getNumero_protocolo(),
            protocolo.getMedico(),
            protocolo.getTipo(),
            protocolo.getFechaEntrada(),
            protocolo.getFechaSalida(),
            protocolo.getEstado(),
            protocolo.getMonto()
        };
        model.addRow(fila);
    }
    

    // Asignar el modelo a la tabla
    tableDatos.setModel(model);
    
     // Ajustar el tamaño de las columnas
    TableColumnModel columnModel = tableDatos.getColumnModel();
    columnModel.getColumn(0).setPreferredWidth(20);  // ID
    columnModel.getColumn(1).setPreferredWidth(30); // Número de Protocolo
    columnModel.getColumn(2).setPreferredWidth(80); // Id Paciente
    columnModel.getColumn(3).setPreferredWidth(100); // Médico
    columnModel.getColumn(4).setPreferredWidth(200); // Tipo
    columnModel.getColumn(5).setPreferredWidth(100); // Fecha de Entrada
    columnModel.getColumn(6).setPreferredWidth(100); // Fecha de Salida
    columnModel.getColumn(7).setPreferredWidth(100); // Estado
    columnModel.getColumn(8).setPreferredWidth(100); // Monto
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAbonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbonarActionPerformed
        try {
        // Obtener los datos necesarios
        Paciente pacienteSeleccionado = (Paciente) cbxRazonSocial.getSelectedItem();
        if (pacienteSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id_paciente = pacienteSeleccionado.getIdPaciente();

        Protocolo protocoloSeleccionado = (Protocolo) cbxProtocolos.getSelectedItem();
        if (protocoloSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un protocolo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String numero_protocolo = protocoloSeleccionado.getNumero_protocolo();

        ObraSocial obraSocialSeleccionada = (ObraSocial) cbxObraSocial.getSelectedItem();
        if (obraSocialSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una obra social.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id_obra_social = obraSocialSeleccionada.getId_obra_social();

        String forma_de_pago = "";
        if (chkEfectivo.isSelected()) {
            forma_de_pago = "Efectivo";
        } else if (chkTransferencia.isSelected()) {
            forma_de_pago = "Transferencia";
        } else if (chkCC.isSelected()) {
            forma_de_pago = "Cuenta Corriente";
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una forma de pago.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double porcentajeDescuento = obraSocialSeleccionada.getPorcentaje();
        double subTotal = Double.parseDouble(txtSubTotal.getText());
        double monto = subTotal * (porcentajeDescuento / 100);
        monto = Math.round(monto * 100.0) / 100.0;

        String usuario = txtUsuario.getText();
        double totalFinal = Double.parseDouble(txtTotalFinal.getText());
        double descuentoObraSocial = Double.parseDouble(txtDescuentoObraSocial.getText());

        double efectivo = chkEfectivo.isSelected() ? totalFinal : 0;
        double transferencia = chkTransferencia.isSelected() ? totalFinal : 0;
        double cuentaCorriente = chkCC.isSelected() ? totalFinal : 0;

        java.sql.Timestamp fecha = new java.sql.Timestamp(new java.util.Date().getTime());

        cajaData caja = new cajaData();
        int id_caja = caja.agregarEntradaCaja(usuario, subTotal, forma_de_pago, numero_protocolo, fecha, efectivo, transferencia, cuentaCorriente, descuentoObraSocial);

        if (chkCC.isSelected()) {
            ccData = new CuentaCorrienteData();
            ccData.agregarCuentaCorriente(id_paciente, id_caja, usuario, fecha, totalFinal, 0); // Suponiendo que egreso es totalFinal y ingreso es 0
        }

        obData.agregarHistorialObraSocial(id_obra_social, id_paciente, numero_protocolo, monto, forma_de_pago, "Solicitado");

        JOptionPane.showMessageDialog(this, "El abono ha sido registrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error de SQL: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error al procesar el abono: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAbonarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
       dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtCuadroBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCuadroBusquedaActionPerformed
         // Obtener el texto del campo de búsqueda
    String busqueda = txtCuadroBusqueda.getText().trim();
    
    // Determinar el tipo de búsqueda
    boolean buscarPorDni = chkDni.isSelected();
    boolean buscarPorProtocolo = chkNProtocolo.isSelected();
    
    List<Protocolo> resultados = new ArrayList<>();
    
    if (buscarPorDni && !buscarPorProtocolo) {
        // Búsqueda solo por DNI
        resultados = protocoloData.buscarProtocolos(null, busqueda);
    } else if (!buscarPorDni && buscarPorProtocolo) {
        // Búsqueda solo por número de protocolo
        resultados = protocoloData.buscarProtocolos(busqueda, null);
    } else if (buscarPorDni && buscarPorProtocolo) {
        // Búsqueda por número de protocolo y DNI
        resultados = protocoloData.buscarProtocolos(busqueda, busqueda);
    } else {
        // Mostrar mensaje de error si no se selecciona ninguna opción
        JOptionPane.showMessageDialog(null, "Seleccione una opción de búsqueda.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Definir las columnas de la tabla
    String[] columnas = {"ID",  "Id Paciente","Número de Protocolo","Médico", "Tipo", "Fecha de Entrada", "Fecha de Salida","Estado", "Monto"};

    // Crear el modelo de tabla con las columnas
    DefaultTableModel model = new DefaultTableModel(columnas, 0);

    // Llenar el modelo con los resultados de la búsqueda
    for (Protocolo protocolo : resultados) {
        Object[] fila = new Object[]{
            protocolo.getIdProtocolo(),
            protocolo.getIdPaciente(),
            protocolo.getNumero_protocolo(),
            protocolo.getMedico(),
            protocolo.getTipo(),
            protocolo.getFechaEntrada(),
            protocolo.getFechaSalida(),
            protocolo.getEstado(),
            protocolo.getMonto()
        };
        model.addRow(fila);
    }
    

    // Asignar el modelo a la tabla
    tableDatos.setModel(model);
    
     // Ajustar el tamaño de las columnas
    TableColumnModel columnModel = tableDatos.getColumnModel();
    columnModel.getColumn(0).setPreferredWidth(20);  // ID
    columnModel.getColumn(1).setPreferredWidth(30); // Número de Protocolo
    columnModel.getColumn(2).setPreferredWidth(80); // Id Paciente
    columnModel.getColumn(3).setPreferredWidth(100); // Médico
    columnModel.getColumn(4).setPreferredWidth(200); // Tipo
    columnModel.getColumn(5).setPreferredWidth(100); // Fecha de Entrada
    columnModel.getColumn(6).setPreferredWidth(100); // Fecha de Salida
    columnModel.getColumn(7).setPreferredWidth(100); // Estado
    columnModel.getColumn(8).setPreferredWidth(100); // Monto
    }//GEN-LAST:event_txtCuadroBusquedaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(entregarProtocolo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(entregarProtocolo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(entregarProtocolo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(entregarProtocolo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new entregarProtocolo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbonar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<ObraSocial> cbxObraSocial;
    private javax.swing.JComboBox<Protocolo> cbxProtocolos;
    private javax.swing.JComboBox<Paciente> cbxRazonSocial;
    private javax.swing.JCheckBox chkCC;
    private javax.swing.JCheckBox chkDni;
    private javax.swing.JCheckBox chkEfectivo;
    private javax.swing.JCheckBox chkNProtocolo;
    private javax.swing.JCheckBox chkTransferencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tableDatos;
    private javax.swing.JTextField txtCuadroBusqueda;
    private javax.swing.JTextField txtDescuentoObraSocial;
    private javax.swing.JTextField txtSubTotal;
    private javax.swing.JTextField txtTotalFinal;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables

 private void llenarComboBoxRazonSocial() {
    List<Paciente> pacientes = pacienteData.obtenerTodosLosPacientes();
    DefaultComboBoxModel<Paciente> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacío al inicio
    model.addElement(null);

    for (Paciente paciente : pacientes) {
        model.addElement(paciente);
    }

    cbxRazonSocial.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar apellido, nombre
    cbxRazonSocial.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof Paciente) {
                Paciente paciente = (Paciente) value;
                value = paciente.getApellido() + ", " + paciente.getNombre()+ ", " + paciente.getIdPaciente();
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacía para el elemento vacío
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });
}
 
  private void llenarComboBoxObraSocial() {
    List<ObraSocial> listaObraSocial = obData.listarObraSocial();
    DefaultComboBoxModel<ObraSocial> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacío al inicio
    model.addElement(null);

    for (ObraSocial obraSocial : listaObraSocial) {
        model.addElement(obraSocial);
    }

    cbxObraSocial.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar nombre, observación y porcentaje
    cbxObraSocial.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof ObraSocial) {
                ObraSocial obraSocial = (ObraSocial) value;
                value = obraSocial.getId_obra_social() + " - " + obraSocial.getNombre() + " - " + obraSocial.getPorcentaje() + "%";
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacía para el elemento vacío
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });

    // Agregar ItemListener para calcular el descuento cuando se selecciona una obra social
    cbxObraSocial.addItemListener(new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                calcularDescuentoObraSocial();
            }
        }
    });
}
 
 private void agregarActionListenerComboBox() {
    cbxRazonSocial.addActionListener(new java.awt.event.ActionListener() {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            Paciente pacienteSeleccionado = (Paciente) cbxRazonSocial.getSelectedItem();
            if (pacienteSeleccionado != null) {
//                txtTelefono.setText(pacienteSeleccionado.getTelefono());
//                txtDni.setText(pacienteSeleccionado.getDni());
                // Llenar cbxProtocolos con los protocolos del paciente seleccionado
                List<Protocolo> protocolos = protocoloData.buscarProtocolosPorIdPaciente(pacienteSeleccionado.getIdPaciente());
                DefaultComboBoxModel<Protocolo> protocoloModel = new DefaultComboBoxModel<>();
                
                // Agregar un elemento vacío al inicio
                protocoloModel.addElement(null);

                for (Protocolo protocolo : protocolos) {
                    protocoloModel.addElement(protocolo);
                }
                
                cbxProtocolos.setModel(protocoloModel);

                // Configurar el renderizado del JComboBox para mostrar el número de protocolo
                cbxProtocolos.setRenderer(new javax.swing.DefaultListCellRenderer() {
                    @Override
                    public java.awt.Component getListCellRendererComponent(
                            javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                        if (value instanceof Protocolo) {
                            Protocolo protocolo = (Protocolo) value;
                            value = protocolo.getNumero_protocolo();
                        } else if (value == null) {
                            value = ""; // Mostrar una cadena vacía para el elemento vacío
                        }
                        return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    }
                });
                
            } else {
               
                cbxProtocolos.setModel(new DefaultComboBoxModel<>()); // Limpiar cbxProtocolos
            }
        }
    });
}
 
 private void agregarActionListenerComboBoxProtocolos() {
     cbxProtocolos.addActionListener(evt -> {
        Protocolo protocoloSeleccionado = (Protocolo) cbxProtocolos.getSelectedItem();
        if (protocoloSeleccionado != null) {
            txtSubTotal.setText(Double.toString(protocoloSeleccionado.getMonto()));
        } else {
            txtSubTotal.setText("");
        }
    });
}
 
 
 private void calcularDescuentoObraSocial() {
     ObraSocial obraSocialSeleccionada = (ObraSocial) cbxObraSocial.getSelectedItem();
    if (obraSocialSeleccionada != null) {
        try {
            double porcentajeDescuento = obraSocialSeleccionada.getPorcentaje();
            double subTotal = Double.parseDouble(txtSubTotal.getText());
            double montoDescuento = subTotal * (porcentajeDescuento / 100);
            // Redondear el monto a dos decimales (opcional)
            montoDescuento = Math.round(montoDescuento * 100.0) / 100.0;
            // Mostrar el monto del descuento en el campo de texto txtDescuentoObraSocial
            txtDescuentoObraSocial.setText(String.valueOf(montoDescuento));

            // Calcular el total final restando el descuento del subtotal
            double totalFinal = subTotal - montoDescuento;
            // Redondear el total final a dos decimales (opcional)
            totalFinal = Math.round(totalFinal * 100.0) / 100.0;
            // Mostrar el total final en el campo de texto txtTotalFinal
            txtTotalFinal.setText(String.valueOf(totalFinal));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un subtotal válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        txtDescuentoObraSocial.setText(""); // Limpiar el campo si no hay obra social seleccionada
        txtTotalFinal.setText(""); // Limpiar el campo si no hay obra social seleccionada
    }
}
 
 
 
}
