
package vistas;

import Metodos.CuentaCorrienteData;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import Entidades.CuentaCorriente;
import Entidades.Paciente;
import Metodos.pacienteData;
import java.sql.Timestamp;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.sql.SQLException;
/**
 *
 * @author MeD
 */
public class CueCorriente extends javax.swing.JFrame {

   private pacienteData pacienteData;
    public CueCorriente() {
        initComponents();
        pacienteData = new pacienteData();
       
          llenarComboBoxRazonSocial();
        
    btnBuscar.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        Date desde = new java.util.Date(dcDesde.getDate().getTime());
        Date hasta = new java.util.Date(dcHasta.getDate().getTime());
        
        CuentaCorrienteData ccData = new CuentaCorrienteData();
        List<CuentaCorriente> transferencias = ccData.listarTransferenciasConPaciente(desde, hasta);
        
        // CÃ³digo para llenar tableTransferencias con la lista de transferencias
        DefaultTableModel model = (DefaultTableModel) tableTransferencias.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de llenarla
        
        for (CuentaCorriente cc : transferencias) {
            Object[] rowData = {
                cc.getId_cc(),
                cc.getPaciente().getNombre() + " " + cc.getPaciente().getApellido(),  // Mostrar el nombre completo
//                cc.getId_caja(),
                cc.getUsuario(),
                cc.getFecha(),
                cc.getEgreso(),
                cc.getIngreso()
            };
            model.addRow(rowData);
        }
    }
});

    
    cbxPaciente.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        Paciente pacienteSeleccionado = (Paciente) cbxPaciente.getSelectedItem();
        if (pacienteSeleccionado != null) {
            
            cargarTablaDetallePorPaciente(pacienteSeleccionado.getIdPaciente());
        }
    }
});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransferencias = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        dcDesde = new com.toedter.calendar.JDateChooser();
        dcHasta = new com.toedter.calendar.JDateChooser();
        cbxPaciente = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDetalle = new javax.swing.JTable();
        btnPagar = new javax.swing.JButton();
        txtMonto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTotalCC = new javax.swing.JLabel();
        btnSumarCC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondos/marquesina-1_B.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 110));

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos-micro/lupa (1).png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 140, 120, 40));

        tableTransferencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Paciente", "Usuario", "Fecha", "CC", "Abono"
            }
        ));
        jScrollPane1.setViewportView(tableTransferencias);
        if (tableTransferencias.getColumnModel().getColumnCount() > 0) {
            tableTransferencias.getColumnModel().getColumn(0).setMinWidth(20);
            tableTransferencias.getColumnModel().getColumn(0).setPreferredWidth(20);
            tableTransferencias.getColumnModel().getColumn(0).setMaxWidth(0);
            tableTransferencias.getColumnModel().getColumn(1).setPreferredWidth(140);
            tableTransferencias.getColumnModel().getColumn(1).setMaxWidth(140);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 520, 210));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos-azules/30/adelante.png"))); // NOI18N
        jButton2.setText("  SALIR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 440, 130, 40));
        jPanel1.add(dcDesde, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 140, 180, 40));
        jPanel1.add(dcHasta, new org.netbeans.lib.awtextra.AbsoluteConstraints(505, 140, 180, 40));

        jPanel1.add(cbxPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 240, 40));

        tableDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Fecha", "Pago", "CC"
            }
        ));
        jScrollPane2.setViewportView(tableDetalle);
        if (tableDetalle.getColumnModel().getColumnCount() > 0) {
            tableDetalle.getColumnModel().getColumn(0).setPreferredWidth(97);
            tableDetalle.getColumnModel().getColumn(0).setMaxWidth(97);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 207, 240, 210));

        btnPagar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPagar.setForeground(new java.awt.Color(0, 102, 102));
        btnPagar.setText("ABONAR");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel1.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, 110, 40));
        jPanel1.add(txtMonto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 120, 40));

        jLabel2.setText("Total en Cuenta Corriente");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));
        jPanel1.add(txtTotalCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 420, 90, 20));

        btnSumarCC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSumarCC.setForeground(new java.awt.Color(153, 0, 0));
        btnSumarCC.setText("SUMAR A CC");
        btnSumarCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSumarCCActionPerformed(evt);
            }
        });
        jPanel1.add(btnSumarCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 460, 120, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
   
         Paciente paciente = (Paciente) cbxPaciente.getSelectedItem();
    if (paciente == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un paciente");
        return;
    }

    try {
        double monto = Double.parseDouble(txtMonto.getText());
        if (monto <= 0) {
            JOptionPane.showMessageDialog(this, "El monto debe ser mayor a cero.");
            return;
        }

        CuentaCorrienteData ccData = new CuentaCorrienteData();
        int id_caja = 1;
        String usuario = "admin";
        Timestamp fecha = new Timestamp(System.currentTimeMillis());

        ccData.agregarCuentaCorriente(
            paciente.getIdPaciente(),
            id_caja,
            usuario,
            fecha,
            0.0,
            monto
        );

        cargarTablaDetallePorPaciente(paciente.getIdPaciente());
        JOptionPane.showMessageDialog(this, "â Ingreso registrado correctamente.");
        txtMonto.setText(""); // Limpiar
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Monto invÃ¡lido.");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al registrar ingreso: " + ex.getMessage());
    }

        
        
   




    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnSumarCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSumarCCActionPerformed
   
    Paciente paciente = (Paciente) cbxPaciente.getSelectedItem();
    if (paciente == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un paciente");
        return;
    }

    try {
        double monto = Double.parseDouble(txtMonto.getText());
        if (monto <= 0) {
            JOptionPane.showMessageDialog(this, "El monto debe ser mayor a cero.");
            return;
        }

        CuentaCorrienteData ccData = new CuentaCorrienteData();
        int id_caja = 1;
        String usuario = "admin";
        Timestamp fecha = new Timestamp(System.currentTimeMillis());

        ccData.agregarCuentaCorriente(
            paciente.getIdPaciente(),
            id_caja,
            usuario,
            fecha,
            monto,
            0.0
        );

        cargarTablaDetallePorPaciente(paciente.getIdPaciente());
        JOptionPane.showMessageDialog(this, "â Egreso registrado correctamente.");
        txtMonto.setText(""); // Limpiar
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Monto invÃ¡lido.");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al registrar egreso: " + ex.getMessage());
    }

    }//GEN-LAST:event_btnSumarCCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaCorriente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaCorriente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaCorriente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaCorriente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CueCorriente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnSumarCC;
    private javax.swing.JComboBox<Paciente> cbxPaciente;
    private com.toedter.calendar.JDateChooser dcDesde;
    private com.toedter.calendar.JDateChooser dcHasta;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDetalle;
    private javax.swing.JTable tableTransferencias;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JLabel txtTotalCC;
    // End of variables declaration//GEN-END:variables

private void cargarTablaDetallePorPaciente2(int idPaciente) {
    CuentaCorrienteData cuentaCorrienteData = new CuentaCorrienteData();
    List<CuentaCorriente> cuentas = cuentaCorrienteData.listarCuentasPorPaciente(idPaciente);

    DefaultTableModel modelo = (DefaultTableModel) tableDetalle.getModel();
    modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

    for (CuentaCorriente cuenta : cuentas) {
        modelo.addRow(new Object[]{
//            cuenta.getId_cc(),
//            cuenta.getPaciente().getNombre() + " " + cuenta.getPaciente().getApellido(),
            cuenta.getFecha(),
            cuenta.getIngreso(),
            cuenta.getEgreso()
        });
    }
}

 private void llenarComboBoxRazonSocial() {
    List<Paciente> pacientes = pacienteData.obtenerTodosLosPacientes();
    DefaultComboBoxModel<Paciente> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacÃ­o al inicio
    model.addElement(null);

    for (Paciente paciente : pacientes) {
        model.addElement(paciente);
    }

    cbxPaciente.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar apellido, nombre
    cbxPaciente.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof Paciente) {
                Paciente paciente = (Paciente) value;
                value = paciente.getApellido() + ", " + paciente.getNombre()+ ", " + paciente.getIdPaciente();
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacÃ­a para el elemento vacÃ­o
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });
}



private void cargarTablaDetallePorPaciente(int idPaciente) {
    CuentaCorrienteData cuentaCorrienteData = new CuentaCorrienteData();
    List<CuentaCorriente> cuentas = cuentaCorrienteData.listarCuentasPorPaciente(idPaciente);

    DefaultTableModel modelo = (DefaultTableModel) tableDetalle.getModel();
    modelo.setRowCount(0); // Limpiar tabla

    double total = 0.0;

    for (CuentaCorriente cuenta : cuentas) {
        modelo.addRow(new Object[]{
            cuenta.getFecha(),
            cuenta.getIngreso(),
            cuenta.getEgreso()
        });

        total += cuenta.getIngreso() - cuenta.getEgreso();
    }

    txtTotalCC.setText(String.format("%.2f", total)); // Mostrar el total en el campo
}
}